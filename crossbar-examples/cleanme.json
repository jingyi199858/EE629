{
   "name": "votes:browser",
   "help": "Demo that casts live votes synchronized across HTML5 clients. Backend runs in the browser.",
   "basedir": "templates/votes/browser",
   "params": {
   },
   "skip_jinja": ['banana_small.png', 'chocolate_small.png', 'crossbar_icon_inverted.png', 'lemon_small.png', 'favicon.ico']
},

{
   "name": "votes:nodejs",
   "help": "Demo that casts live votes synchronized across HTML5 clients. Backend runs in NodeJS.",
   "get_started_hint": "Now install dependencies by doing 'npm install', start Crossbar using 'crossbar start' and open http://localhost:8080 in your browser.",
   "basedir": "templates/votes/nodejs",
   "params": {
   },
   "skip_jinja": ['banana_small.png', 'chocolate_small.png', 'crossbar_icon_inverted.png', 'lemon_small.png', 'favicon.ico']
},

{
   "name": "votes:python",
   "help": "Demo that casts live votes synchronized across HTML5 clients. Backend runs in Python.",
   "basedir": "templates/votes/python",
   "params": {
   },
   "skip_jinja": ['banana_small.png', 'chocolate_small.png', 'crossbar_icon_inverted.png', 'lemon_small.png', 'favicon.ico']
},

{
   "name": "demos",
   "help": "A Crossbar.io node running the crossbardemo package. Requires 'pip install crossbardemo'.",
   "basedir": "templates/demos",
   "params": {
   }
},

{
   "name": "pusher",
   "help": "A WAMP router with a HTTP gateway for pushing events.",
   "basedir": "templates/pusher",
   "params": {
   }
},

{
   "name": "longpoll",
   "help": "Demonstrates WAMP longpoll transport for old browsers.",
   "basedir": "templates/longpoll",
   "params": {
   }
},

{
   "name": "expressjs",
   "help": "Using Crossbar.io, Node and Express.",
   "basedir": "templates/expressjs",
   "params": {
   },
   "skip_jinja": ["index.html", "base.html", "monitor.html"]
},

{
   "name": "flash",
   "help": "Demonstrates using the Flash WebSocket implementation for old browsers.",
   "basedir": "templates/flash",
   "params": {
   },
   "skip_jinja": ["WebSocketMain.swf"]
},

{
   "name": "pg:publisher",
   "help": "Demonstrates how to publish WAMP events from within PostgreSQL.",
   "basedir": "templates/pg/publisher",
   "params": {
      "schema": "crossbar"
   },
   "get_started_hint": """
Now build the example by doing 'scons', start Crossbar using 'crossbar start'
and open http://localhost:8080 in your browser.         
   """
},

{
   "name": "oracle:publisher",
   "help": "Demonstrates how to publish WAMP events from within Oracle database.",
   "basedir": "templates/oracle/publisher",
   "params": {
      "cbadapter": "cbadapter",
      "cbadapter_password": "crossbar",
      "cbdb": "cbdb",
      "cbdb_password": "crossbar",
      "cbdb_tablespace": "users",
      "cbadapter": "cbadapter",
      "nchar_maxlen": 2000,
      "pipe_onpublish": "crossbar_on_publish",
      "pipe_onexport": "crossbar_on_export"
   },
   "get_started_hint": """Now install the Crossbar.io Oracle database integration by doing:

cd database
make create_users
make install

Then start Crossbar.io (from the current directory):

crossbar start

and open your browser pointing to http://localhost:8080.
   """
},

{
   "name": "authenticate:wampcra",
   "help": "Demonstrates authentication via WAMP-CRA from a static user database defined in the node configuration.",
   "basedir": "templates/authenticate/wampcra",
   "params": {
   }
},

{
   "name": "authenticate:wampcradynamic:python",
   "help": "Demonstrates authentication via WAMP-CRA from a user-defined authenticator procedure written in Python.",
   "basedir": "templates/authenticate/wampcradynamic/python",
   "params": {
   }
},

{
   "name": "authenticate:wampcradynamic:nodejs",
   "help": "Demonstrates authentication via WAMP-CRA from a user-defined authenticator procedure written in JavaScript.",
   "basedir": "templates/authenticate/wampcradynamic/nodejs",
   "params": {
   }
},

{
   "name": "authenticate:wampcradynamic:php",
   "help": "Demonstrates authentication via WAMP-CRA from a user-defined authenticator procedure written in PHP.",
   "basedir": "templates/authenticate/wampcradynamic/php",
   "params": {
   }
},

{
   "name": "authenticate:ticket",
   "help": "Demonstrates authentication via Ticket-based authentication from a static principals database defined in the node configuration.",
   "basedir": "templates/authenticate/ticket",
   "params": {
   }
},

{
   "name": "authenticate:ticketdynamic:python",
   "help": "Demonstrates authentication via Ticket-based authentication from a user-defined authenticator procedure written in Python.",
   "basedir": "templates/authenticate/ticketdynamic/python",
   "params": {
   }
},

{
   "name": "wss:python",
   "help": "Using secure WebSocket transports (wss) with JavaScript frontend and Python backend.",
   "basedir": "templates/wss/python",
   "params": {
   },
   "get_started_hint": """Start Crossbar using 'crossbar start' and open https://localhost:8080 in your browser (note the 'https' in the URL).
For more info, please visit http://crossbar.io/docs/Secure-WebSocket-and-HTTPS/
"""
},

{
   "name": "device:pi:monitor",
   "help": "Demonstrates running Crossbar on the RaspberryPi and running a WAMP component monitoring the SoC temperature.",
   "basedir": "templates/device/pi/monitor",
   "params": {
   },
   "get_started_hint": """Start Crossbar (on the Pi) using 'crossbar start' and open http://<Your Pi's IP>:8080 in your browser."""
},

{
   "name": "device:pi:gpio",
   "help": "Demonstrates running Crossbar on the RaspberryPi and hooking up the GPIO in a WAMP component.",
   "basedir": "templates/device/pi/gpio",
   "params": {
   },
   "get_started_hint": """Start Crossbar (on the Pi) using 'sudo crossbar start' and open http://<Your Pi's IP>:8080 in your browser."""
},
